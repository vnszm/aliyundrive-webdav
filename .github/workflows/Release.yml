name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64-apple-darwin
          args: --release --out dist --strip
      - name: Install built wheel - x86_64
        run: |
          pip install aliyundrive-webdav --no-index --find-links dist --force-reinstall
          aliyundrive-webdav --help
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --strip --no-sdist
      - name: Install built wheel - universal2
        run: |
          pip install aliyundrive-webdav --no-index --find-links dist --force-reinstall
          aliyundrive-webdav --help
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: apple-darwin-bin
          path: target/release/aliyundrive-webdav
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/release
          tar czvf aliyundrive-webdav-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz aliyundrive-webdav
          shasum -a 256 aliyundrive-webdav-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz > aliyundrive-webdav-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/aliyundrive-webdav*.tar.gz
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - arch: x64
            target: x86_64-pc-windows-msvc
          - arch: x86
            target: i686-pc-windows-msvc
          - arch: arm64
            target: aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        if: matrix.platform.arch != 'arm64'
        with:
          python-version: 3.9
          architecture: ${{ matrix.platform.arch }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
      - name: Build wheels
        if: matrix.platform.arch != 'arm64'
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --no-sdist --strip
      - name: Build wheels
        if: matrix.platform.arch == 'arm64'
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --no-sdist --strip --cargo-extra-args="--no-default-features" --cargo-extra-args="--features atomic64,native-tls"
      - name: Install built wheel
        if: matrix.platform.arch != 'arm64'
        run: |
          pip install aliyundrive-webdav --no-index --find-links dist --force-reinstall
          aliyundrive-webdav --help
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.platform.arch }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav.exe
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          7z a aliyundrive-webdav.zip aliyundrive-webdav.exe
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.zip
          file: target/${{ matrix.platform.target }}/release/aliyundrive-webdav.zip
          overwrite: true
          tag: ${{ github.ref }}

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl", wheel: true, deb: true },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", wheel: true, deb: true },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", wheel: true, deb: true },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", wheel: true, deb: true },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi", wheel: false, deb: true },
          { target: "arm-unknown-linux-musleabihf", image_tag: "arm-musleabihf", wheel: false, deb: false },
          { target: "arm-unknown-linux-musleabi", image_tag: "arm-musleabi", wheel: false, deb: false },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build wheels - manylinux
        uses: messense/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --no-sdist --release -o dist --strip
      - name: Build wheels - musllinux
        if: matrix.platform.wheel
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_1
          container: off
          args: --release --out dist --no-sdist --strip
      - name: Install cargo packages
        if: matrix.platform.deb
        run: |
          which cargo-deb > /dev/null || cargo install --target `rustc -vV | grep host: | awk '{print $2}'` cargo-deb
          which cargo-generate-rpm > /dev/null || cargo install --target `rustc -vV | grep host: | awk '{print $2}'` cargo-generate-rpm
      - name: Build Debian package
        if: matrix.platform.deb
        run: cargo deb --target=${{ matrix.platform.target }} --no-build --no-strip
      - name: Build RPM package
        if: matrix.platform.deb
        run: cargo generate-rpm --target=${{ matrix.platform.target }} --payload-compress none
      - name: Upload wheels
        if: matrix.platform.wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Install upx
        working-directory: /tmp
        env:
          CC: clang
          CXX: clang++
        run: |
          set -ex
          curl -sqLO https://www.oberhumer.com/opensource/ucl/download/ucl-1.03.tar.gz
          tar zxf ucl-1.03.tar.gz
          cd ucl-1.03
          ./configure --with-pic --disable-debug --disable-dependency-tracking --prefix=/usr/local
          sudo make install
          cd ..
          git clone --recursive https://github.com/upx/upx.git
          cd upx
          make all
          cp src/upx.out /usr/local/bin/upx
          chmod +x /usr/local/bin/upx
      - name: Upx compress binary
        run: upx target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
          if-no-files-found: error
      - name: Upload deb artifacts
        if: matrix.platform.deb
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-deb
          path: target/${{ matrix.platform.target }}/debian/aliyundrive-webdav_*.deb
          if-no-files-found: error
      - name: Upload RPM artifacts
        if: matrix.platform.deb
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-rpm
          path: target/${{ matrix.platform.target }}/generate-rpm/aliyundrive-webdav*.rpm
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz aliyundrive-webdav
          shasum -a 256 aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/release/aliyundrive-webdav*.tar.gz*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
      - name: Upload deb to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/') && matrix.platform.deb"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/debian/aliyundrive-webdav_*.deb
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
      - name: Upload RPM to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/') && matrix.platform.deb"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/generate-rpm/aliyundrive-webdav*.rpm
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
      - name: Remove cached deb and RPM packages
        if: matrix.platform.deb
        run: |
          rm -rf target/${{ matrix.platform.target }}/debian
          rm -rf target/${{ matrix.platform.target }}/generate-rpm

  linux-others:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: "armv5te-unknown-linux-musleabi"
            image_tag: "armv5te-musleabi"
            cargo_extra_args: --no-default-features --features rustls-tls
          - target: "mips-unknown-linux-musl"
            image_tag: "mips-musl"
            cargo_extra_args: --no-default-features --features native-tls-vendored
          - target: "mipsel-unknown-linux-musl"
            image_tag: "mipsel-musl"
            cargo_extra_args: --no-default-features --features native-tls-vendored
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build
        env:
          RUSTFLAGS: -C target-feature=+crt-static -C link-arg=-s
        run: |
          cargo build --release --target ${{ matrix.platform.target }} ${{ matrix.platform.cargo_extra_args }}
      - name: Upx compress binary
        uses: crazy-max/ghaction-upx@v1
        with:
          version: v3.95  # v3.96 breaks mipsel, https://github.com/upx/upx/issues/504
          files: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz aliyundrive-webdav
          shasum -a 256 aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.platform.target }}/release/aliyundrive-webdav*.tar.gz*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}

  openwrt:
    name: OpenWrt Package - ${{ matrix.target.arch }}
    runs-on: ubuntu-latest
    needs: [ linux, linux-others ]
    environment: OpenWrt
    strategy:
      matrix:
        target:
          - arch: "aarch64_generic"
            sdk: "https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/openwrt-sdk-rockchip-armv8_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "arm_cortex-a9"
            sdk: "https://downloads.openwrt.org/snapshots/targets/bcm53xx/generic/openwrt-sdk-bcm53xx-generic_gcc-11.3.0_musl_eabi.Linux-x86_64.tar.xz"
          - arch: "aarch64_cortex-a53"
            sdk: "https://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-sdk-bcm27xx-bcm2710_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "aarch64_cortex-a72"
            sdk: "https://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2711/openwrt-sdk-bcm27xx-bcm2711_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "x86_64"
            sdk: "https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "i386_pentium4"
            sdk: "https://downloads.openwrt.org/snapshots/targets/x86/generic/openwrt-sdk-x86-generic_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "arm_mpcore"
            sdk: "https://downloads.openwrt.org/snapshots/targets/oxnas/ox820/openwrt-sdk-oxnas-ox820_gcc-11.3.0_musl_eabi.Linux-x86_64.tar.xz"
          - arch: "arm_cortex-a5_vfpv4"
            sdk: "https://downloads.openwrt.org/snapshots/targets/at91/sama5/openwrt-sdk-at91-sama5_gcc-11.3.0_musl_eabi.Linux-x86_64.tar.xz"
          - arch: "arm_cortex-a7_neon-vfpv4"
            sdk: "https://downloads.openwrt.org/snapshots/targets/ipq40xx/generic/openwrt-sdk-ipq40xx-generic_gcc-11.3.0_musl_eabi.Linux-x86_64.tar.xz"
          - arch: "mipsel_24kc"
            sdk: "https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-sdk-ramips-mt7621_gcc-11.3.0_musl.Linux-x86_64.tar.xz"
          - arch: "mips_24kc"
            sdk: "https://archive.openwrt.org/releases/19.07.7/targets/ar71xx/nand/openwrt-sdk-19.07.7-ar71xx-nand_gcc-7.5.0_musl.Linux-x86_64.tar.xz"
    steps:
      - uses: actions/checkout@v2
      - name: Install build requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
          python3-distutils python3-setuptools python3-dev rsync subversion \
          swig time xsltproc zlib1g-dev
      - name: Install OpenWrt SDK
        run: |
          wget -O openwrt-sdk.tar.xz ${{ matrix.target.sdk }}
          xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar
          mv -f openwrt-sdk-* openwrt-sdk
      - name: Build Package
        run: |
          echo "src-link aliyundrive $GITHUB_WORKSPACE/openwrt" > openwrt-sdk/feeds.conf
          echo 'CONFIG_PACKAGE_aliyundrive-webdav=y
          CONFIG_PACKAGE_luci-app-aliyundrive-webdav=y
          ' >> openwrt-sdk/.config
          cd openwrt-sdk
          cat feeds.conf.default >> feeds.conf
          cat feeds.conf

          ./scripts/feeds update -a > /dev/null
          make defconfig

          ./scripts/feeds install -d y -f -a
          make package/aliyundrive-webdav/compile V=s
          make package/luci-app-aliyundrive-webdav/compile V=s
          tree bin/packages/
      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
          name: aliyundrive-webdav-openwrt-${{ matrix.target.arch }}
          path: openwrt-sdk/bin/packages/*/aliyundrive/aliyundrive-webdav*.ipk
          if-no-files-found: error
      - name: Archive luci packages
        uses: actions/upload-artifact@v2
        if: ${{ matrix.target.arch == 'aarch64_generic' }}
        with:
          name: aliyundrive-webdav-openwrt-${{ matrix.target.arch }}
          path: openwrt-sdk/bin/packages/*/aliyundrive/luci-*.ipk
          if-no-files-found: error
      - name: Upload package to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: openwrt-sdk/bin/packages/*/aliyundrive/aliyundrive-webdav*.ipk
          tag: ${{ github.ref }}
      - name: Upload luci packages to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.target.arch == 'aarch64_generic' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: openwrt-sdk/bin/packages/*/aliyundrive/luci-*.ipk
          tag: ${{ github.ref }}

  merlin:
    name: Merlin Package
    runs-on: ubuntu-latest
    needs: [ linux, linux-others ]
    environment: Merlin
    strategy:
      matrix:
        platform:
          - type: arm380
            name: arm380-armv7
            target: armv7-unknown-linux-musleabi
          - type: arm380
            name: arm380-armhf
            target: armv7-unknown-linux-musleabihf
          - type: arm384
            name: arm384-armv5te
            target: armv5te-unknown-linux-musleabi
          - type: arm384
            name: arm384-armv7
            target: armv7-unknown-linux-musleabi
          - type: arm384
            name: arm384-armhf
            target: armv7-unknown-linux-musleabihf
          - type: arm384
            name: arm384-aarch64
            target: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
      - name: Build package
        run: |
          mv aliyundrive-webdav merlin/${{ matrix.platform.type }}/bin/
          cd merlin && python3 build.py ${{ matrix.platform.type }} && mv aliyundrivewebdav.tar.gz aliyundrivewebdav-merlin-${{ matrix.platform.name }}.tar.gz
      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
          name: aliyundrive-webdav-merlin-${{ matrix.platform.name }}
          path: merlin/aliyundrivewebdav-merlin-${{ matrix.platform.name }}.tar.gz
          if-no-files-found: error
      - name: Upload package to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: merlin/aliyundrivewebdav-merlin-${{ matrix.platform.name }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ linux ]
    environment: Docker Hub
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: x86_64-unknown-linux-musl-bin
      - run: |
          chmod a+x aliyundrive-webdav
          mv aliyundrive-webdav aliyundrive-webdav-amd64
      - uses: actions/download-artifact@v2
        with:
          name: i686-unknown-linux-musl-bin
      - run: |
          chmod a+x aliyundrive-webdav
          mv aliyundrive-webdav aliyundrive-webdav-386
      - uses: actions/download-artifact@v2
        with:
          name: aarch64-unknown-linux-musl-bin
      - run: |
          chmod a+x aliyundrive-webdav
          mv aliyundrive-webdav aliyundrive-webdav-arm64
      - uses: actions/download-artifact@v2
        with:
          name: armv7-unknown-linux-musleabihf-bin
      - run: |
          chmod a+x aliyundrive-webdav
          mv aliyundrive-webdav aliyundrive-webdav-armv7
      - uses: actions/download-artifact@v2
        with:
          name: arm-unknown-linux-musleabihf-bin
      - run: |
          chmod a+x aliyundrive-webdav
          mv aliyundrive-webdav aliyundrive-webdav-armv6
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: messense/aliyundrive-webdav
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Setup QEMU
        uses: dbhi/qus/action@main
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: https://pypi.org/project/aliyundrive-webdav/
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux, macos ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
